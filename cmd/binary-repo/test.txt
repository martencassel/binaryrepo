		repoIndex := repo.NewRepoIndex()
		hubUser := os.Getenv("DOCKERHUB_USERNAME")
		hubPass := os.Getenv("DOCKERHUB_PASSWORD")
		repoIndex.AddRepo(repo.Repo{
			ID:       1,
			Name:     "docker-remote",
			Type:     repo.Remote,
			PkgType:  repo.Docker,
			URL:      "https://registry-1.docker.io",
			Username: hubUser,
			Password: hubPass,
		})
		repoIndex.AddRepo(repo.Repo{
			ID:      2,
			Name:    "docker-local",
			Type:    repo.Local,
			PkgType: repo.Docker,
		})
		repoIndex.AddRepo(repo.Repo{
			ID: 3,
			Name: "docker-group",
			Group: []string{
				"docker-local", "docker-remote",
			},
		})
		r := mux.NewRouter()
		/*dockerProxy := dockerproxy.NewProxyAppWithOptions(fs, repoIndex)
		dockerRegistry := dockerregistry.NewDockerRegistry(fs, repoIndex, uploader)
		dockerRouter := dockerrouter.NewDockerRouter(dockerProxy, dockerRegistry, repoIndex)
		dockerRouter.RegisterHandlers(r)*/
		api.RegisterHandlers(r)
		r.Use(loggingMiddleware)
		r.PathPrefix("/").HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
			log.Info().Msgf("not-implemented %s %s", req.Method, req.URL)
		})
		/*
			If the timeout are to low, DownloadLayer handler will failed with an error such as

				Error copying response: readfrom tcp [::1]:8081->[::1]:54774: write tcp [::1]:8081->[::1]:54774: i/o timeout

			For big layer blobs as in the postgres image

				docker-remote.example.com /v2/postgres/blobs/sha256:794976979956b97dc86e3b99fc0cdcd6385113969574152ba4a6218431f542e9

			This may happen
		*/
